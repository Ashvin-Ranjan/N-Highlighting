# See http://www.sublimetext.com/docs/3/syntax.html
file_extensions:
  - n
scopeName: "N Syntax"
contexts:
  main:
    # Strings begin and end with quotes, and use backslashes as an escape
    # character
    - match: '"'
      scope: punctuation.definition.string.begin.n
      push: double_quoted_string

    # Comments begin with a '//' and finish at the end of the line
    - match: '//'
      scope: punctuation.definition.comment.n
      push: line_comment

    - match: '/\*'
      scope: punctuation.definition.comment.n
      push: end_comment

    - match: '\\{?.}?'
      scope: constant.character.n

    - match: '(?<=:)(\s)*([a-z]+)'
      scope: meta.function.n support.class.n

    - match: '(?<=[^a-zA-z\.])[^(\ ]+(?=\()'
      scope: variable.function.n

    # Keywords are if, else for and while.
    # Note that blackslashes don't need to be escaped within single quoted
    # strings in YAML. When using single quoted strings, only single quotes
    # need to be escaped: this is done by using two single quotes next to each
    # other.
    - match: '((\s|\n|;)*(if|else|->|print|var|import|return|for|not|let|imp|pub|in|alias|type|class)(\s|\{)|~|\+|-|\*|&|\||^|%|=|:|!|>|<|/)'
      scope: keyword.control.n

    - match: '(true|false|none)'
      scope: constant.numeric.n

    # Numbers
    - match: '\b(-)?[0-9.]+\b'
      scope: constant.numeric.n

  double_quoted_string:
    - meta_scope: string.quoted.double.n`
    - match: '\\{?.}?'
      scope: constant.character.n
    - match: '"'
      scope: punctuation.definition.string.end.n
      pop: true      

  line_comment:
    - meta_scope: comment.line.n
    - match: $
      pop: true  

  end_comment:
    - meta_scope: comment.line.n
    - match: .+(?=\*/)
      pop: true